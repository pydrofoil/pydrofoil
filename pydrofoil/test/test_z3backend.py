from pydrofoil.types import *
from pydrofoil.ir import *
from pydrofoil import bitvector, supportcode
from pydrofoil import z3backend
import z3


def test_nand_compute_value():
    zarithmetic_op = Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))
    za = Argument('za', SmallFixedBitVector(1))
    zop = Argument('zop', zarithmetic_op)
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    block18 = Block()
    block19 = Block()
    block20 = Block()
    block21 = Block()
    block22 = Block()
    block23 = Block()
    block24 = Block()
    block25 = Block()
    block26 = Block()
    block27 = Block()
    block28 = Block()
    block29 = Block()
    block30 = Block()
    block31 = Block()
    block32 = Block()
    block33 = Block()
    block34 = Block()
    block35 = Block()
    block36 = Block()
    block37 = Block()
    block38 = Block()
    i2 = block0.emit(Operation, '@eq_bits_bv_bv', [za, SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], Bool(), '`1 124:13-124:21', 'zz441')
    block0.next = ConditionalGoto(i2, block1, block38, '`1 124:10-124:45')
    i3 = block1.emit(GlobalRead, 'zA', [], SmallFixedBitVector(16), None, None)
    block1.next = Goto(block2, None)
    i4 = block2.emit_phi([block38, block1], [None, i3], SmallFixedBitVector(16))
    i5 = block2.emit(GlobalRead, 'zD', [], SmallFixedBitVector(16), None, None)
    i6 = block2.emit(Operation, '@eq', [EnumConstant('zC_ZERO', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 127:4-127:10', None)
    block2.next = ConditionalGoto(i6, block3, block5, '`1 127:4-127:10')
    block3.next = Goto(block4, None)
    i7 = block4.emit_phi([block3, block6, block8, block10, block12, block14, block16, block18, block20, block22, block24, block26, block28, block30, block32, block34, block36, block37], [SmallBitVectorConstant(0x0, SmallFixedBitVector(16)), SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), SmallBitVectorConstant(0xffff, SmallFixedBitVector(16)), i5, i4, None, None, None, None, None, None, None, None, None, None, None, None, None], SmallFixedBitVector(16))
    block4.next = Return(i7, None)
    i8 = block5.emit(Operation, '@eq', [EnumConstant('zC_ONE', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 128:4-128:9', None)
    block5.next = ConditionalGoto(i8, block6, block7, '`1 128:4-128:9')
    block6.next = Goto(block4, None)
    i9 = block7.emit(Operation, '@eq', [EnumConstant('zC_MINUSONE', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 129:4-129:14', None)
    block7.next = ConditionalGoto(i9, block8, block9, '`1 129:4-129:14')
    block8.next = Goto(block4, None)
    i10 = block9.emit(Operation, '@eq', [EnumConstant('zC_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 130:4-130:7', None)
    block9.next = ConditionalGoto(i10, block10, block11, '`1 130:4-130:7')
    block10.next = Goto(block4, None)
    i11 = block11.emit(Operation, '@eq', [EnumConstant('zC_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 131:4-131:7', None)
    block11.next = ConditionalGoto(i11, block12, block13, '`1 131:4-131:7')
    block12.next = Goto(block4, None)
    i12 = block13.emit(Operation, '@eq', [EnumConstant('zC_NOT_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 132:4-132:11', None)
    block13.next = ConditionalGoto(i12, block14, block15, '`1 132:4-132:11')
    i13 = block14.emit(Operation, '@not_vec_bv', [i5, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 132:15-132:25', None)
    i7.prevvalues[5] = i13
    block14.next = Goto(block4, None)
    i14 = block15.emit(Operation, '@eq', [EnumConstant('zC_NOT_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 133:4-133:11', None)
    block15.next = ConditionalGoto(i14, block16, block17, '`1 133:4-133:11')
    i15 = block16.emit(Operation, '@not_vec_bv', [i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 133:15-133:25', None)
    i7.prevvalues[6] = i15
    block16.next = Goto(block4, None)
    i16 = block17.emit(Operation, '@eq', [EnumConstant('zC_NEG_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 134:4-134:11', None)
    block17.next = ConditionalGoto(i16, block18, block19, '`1 134:4-134:11')
    i17 = block18.emit(Operation, '@sub_bits_bv_bv', [SmallBitVectorConstant(0x0, SmallFixedBitVector(16)), i5, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 134:15-134:23', 'zz436')
    i7.prevvalues[7] = i17
    block18.next = Goto(block4, None)
    i18 = block19.emit(Operation, '@eq', [EnumConstant('zC_NEG_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 135:4-135:11', None)
    block19.next = ConditionalGoto(i18, block20, block21, '`1 135:4-135:11')
    i19 = block20.emit(Operation, '@sub_bits_bv_bv', [SmallBitVectorConstant(0x0, SmallFixedBitVector(16)), i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 135:15-135:23', 'zz433')
    i7.prevvalues[8] = i19
    block20.next = Goto(block4, None)
    i20 = block21.emit(Operation, '@eq', [EnumConstant('zC_D_ADD_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 136:4-136:13', None)
    block21.next = ConditionalGoto(i20, block22, block23, '`1 136:4-136:13')
    i21 = block22.emit(Operation, '@add_bits_bv_bv', [i5, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 136:17-136:27', 'zz430')
    i7.prevvalues[9] = i21
    block22.next = Goto(block4, None)
    i22 = block23.emit(Operation, '@eq', [EnumConstant('zC_A_ADD_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 137:4-137:13', None)
    block23.next = ConditionalGoto(i22, block24, block25, '`1 137:4-137:13')
    i23 = block24.emit(Operation, '@add_bits_bv_bv', [i4, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 137:17-137:27', 'zz427')
    i7.prevvalues[10] = i23
    block24.next = Goto(block4, None)
    i24 = block25.emit(Operation, '@eq', [EnumConstant('zC_D_SUB_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 138:4-138:13', None)
    block25.next = ConditionalGoto(i24, block26, block27, '`1 138:4-138:13')
    i25 = block26.emit(Operation, '@sub_bits_bv_bv', [i5, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 138:17-138:27', 'zz424')
    i7.prevvalues[11] = i25
    block26.next = Goto(block4, None)
    i26 = block27.emit(Operation, '@eq', [EnumConstant('zC_A_SUB_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 139:4-139:13', None)
    block27.next = ConditionalGoto(i26, block28, block29, '`1 139:4-139:13')
    i27 = block28.emit(Operation, '@sub_bits_bv_bv', [i4, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 139:17-139:27', 'zz421')
    i7.prevvalues[12] = i27
    block28.next = Goto(block4, None)
    i28 = block29.emit(Operation, '@eq', [EnumConstant('zC_D_ADD_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 140:4-140:13', None)
    block29.next = ConditionalGoto(i28, block30, block31, '`1 140:4-140:13')
    i29 = block30.emit(Operation, '@add_bits_bv_bv', [i5, i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 140:17-140:22', 'zz418')
    i7.prevvalues[13] = i29
    block30.next = Goto(block4, None)
    i30 = block31.emit(Operation, '@eq', [EnumConstant('zC_D_SUB_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 141:4-141:13', None)
    block31.next = ConditionalGoto(i30, block32, block33, '`1 141:4-141:13')
    i31 = block32.emit(Operation, '@sub_bits_bv_bv', [i5, i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 141:17-141:22', 'zz415')
    i7.prevvalues[14] = i31
    block32.next = Goto(block4, None)
    i32 = block33.emit(Operation, '@eq', [EnumConstant('zC_A_SUB_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 142:4-142:13', None)
    block33.next = ConditionalGoto(i32, block34, block35, '`1 142:4-142:13')
    i33 = block34.emit(Operation, '@sub_bits_bv_bv', [i4, i5, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 142:17-142:22', 'zz412')
    i7.prevvalues[15] = i33
    block34.next = Goto(block4, None)
    i34 = block35.emit(Operation, '@eq', [EnumConstant('zC_D_AND_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 143:4-143:13', None)
    block35.next = ConditionalGoto(i34, block36, block37, '`1 143:4-143:13')
    i35 = block36.emit(Operation, '@and_vec_bv_bv', [i5, i4], SmallFixedBitVector(16), '`1 143:17-143:22', 'zz49')
    i7.prevvalues[16] = i35
    block36.next = Goto(block4, None)
    i36 = block37.emit(Operation, '@or_vec_bv_bv', [i5, i4], SmallFixedBitVector(16), '`1 144:16-144:21', 'zz46')
    i7.prevvalues[17] = i36
    block37.next = Goto(block4, None)
    i37 = block38.emit(GlobalRead, 'zA', [], SmallFixedBitVector(16), None, None)
    i38 = block38.emit(Operation, 'my_read_mem', [i37], SmallFixedBitVector(16), '`1 124:34-124:45', 'zz40')
    i4.prevvalues[0] = i38
    block38.next = Goto(block2, None)
    graph = Graph('zcompute_value', [za, zop], block0)

def get_zdecode_destination_graph():
    ztuplez3z5bool_z5bool_z5bool = Struct('ztuplez3z5bool_z5bool_z5bool', ('ztuplez3z5bool_z5bool_z5bool0', 'ztuplez3z5bool_z5bool_z5bool1', 'ztuplez3z5bool_z5bool_z5bool2'), (Bool(), Bool(), Bool()), True)
    zb = Argument('zb', SmallFixedBitVector(3))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    i1 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zb, MachineIntConstant(0), MachineIntConstant(0)], SmallFixedBitVector(1), '`1 112:36-112:37', 'zz420')
    i2 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zb, MachineIntConstant(1), MachineIntConstant(1)], SmallFixedBitVector(1), '`1 112:22-112:23', 'zz416')
    i3 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zb, MachineIntConstant(2), MachineIntConstant(2)], SmallFixedBitVector(1), '`1 112:8-112:9', 'zz412')
    i4 = block0.emit(Comment, 'inlined zbits1_to_bool', [], Unit(), None, None)
    i5 = block0.emit(Operation, '@eq_bits_bv_bv', [i3, SmallBitVectorConstant(0b1, SmallFixedBitVector(1))], Bool(), '`1 14:2-14:5', 'zz42')
    block0.next = ConditionalGoto(i5, block1, block9, '`1 13:27-16:1')
    block1.next = Goto(block2, None)
    i6 = block2.emit_phi([block1, block9], [BooleanConstant.TRUE, BooleanConstant.FALSE], Bool())
    i7 = block2.emit(Comment, 'inlined zbits1_to_bool', [], Unit(), None, None)
    i8 = block2.emit(Operation, '@eq_bits_bv_bv', [i2, SmallBitVectorConstant(0b1, SmallFixedBitVector(1))], Bool(), '`1 14:2-14:5', 'zz42')
    block2.next = ConditionalGoto(i8, block3, block8, '`1 13:27-16:1')
    block3.next = Goto(block4, None)
    i9 = block4.emit_phi([block3, block8], [BooleanConstant.TRUE, BooleanConstant.FALSE], Bool())
    i10 = block4.emit(Comment, 'inlined zbits1_to_bool', [], Unit(), None, None)
    i11 = block4.emit(Operation, '@eq_bits_bv_bv', [i1, SmallBitVectorConstant(0b1, SmallFixedBitVector(1))], Bool(), '`1 14:2-14:5', 'zz42')
    block4.next = ConditionalGoto(i11, block5, block7, '`1 13:27-16:1')
    block5.next = Goto(block6, None)
    i12 = block6.emit_phi([block5, block7], [BooleanConstant.TRUE, BooleanConstant.FALSE], Bool())
    i13 = block6.emit(StructConstruction, 'ztuplez3z5bool_z5bool_z5bool', [i6, i9, i12], ztuplez3z5bool_z5bool_z5bool, None, None)
    block6.next = Return(i13, None)
    block7.next = Goto(block6, None)
    block8.next = Goto(block4, None)
    block9.next = Goto(block2, None)
    graph = Graph('zdecode_destination', [zb], block0)
    return graph

def get_decode_compute_backwards_graph():
    zarithmetic_op = Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))
    zargz3 = Argument('zargz3', SmallFixedBitVector(6))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    block18 = Block()
    block19 = Block()
    block20 = Block()
    block21 = Block()
    block22 = Block()
    block23 = Block()
    block24 = Block()
    block25 = Block()
    block26 = Block()
    block27 = Block()
    block28 = Block()
    block29 = Block()
    block30 = Block()
    block31 = Block()
    block32 = Block()
    block33 = Block()
    block34 = Block()
    block35 = Block()
    block36 = Block()
    block37 = Block()
    i1 = block0.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b101010, SmallFixedBitVector(6))], Bool(), '`1 56:19-56:27', 'zz470')
    block0.next = ConditionalGoto(i1, block1, block3, '`3')
    block1.next = Goto(block2, None)
    i2 = block2.emit_phi([block1, block4, block6, block8, block10, block12, block14, block16, block18, block20, block22, block24, block26, block28, block30, block32, block34, block36], [EnumConstant('zC_ZERO', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_ONE', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_MINUSONE', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_NOT_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_NOT_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_NEG_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_NEG_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D_ADD_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_A_ADD_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D_SUB_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_A_SUB_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D_ADD_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D_SUB_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_A_SUB_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D_AND_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), EnumConstant('zC_D_OR_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A')))], zarithmetic_op)
    block2.next = Return(i2, None)
    i3 = block3.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b111111, SmallFixedBitVector(6))], Bool(), '`1 57:19-57:27', 'zz466')
    block3.next = ConditionalGoto(i3, block4, block5, '`5')
    block4.next = Goto(block2, None)
    i4 = block5.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b111010, SmallFixedBitVector(6))], Bool(), '`1 58:19-58:27', 'zz462')
    block5.next = ConditionalGoto(i4, block6, block7, '`7')
    block6.next = Goto(block2, None)
    i5 = block7.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b1100, SmallFixedBitVector(6))], Bool(), '`1 59:19-59:27', 'zz458')
    block7.next = ConditionalGoto(i5, block8, block9, '`9')
    block8.next = Goto(block2, None)
    i6 = block9.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b110000, SmallFixedBitVector(6))], Bool(), '`1 60:19-60:27', 'zz454')
    block9.next = ConditionalGoto(i6, block10, block11, '`11')
    block10.next = Goto(block2, None)
    i7 = block11.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b1101, SmallFixedBitVector(6))], Bool(), '`1 61:19-61:27', 'zz450')
    block11.next = ConditionalGoto(i7, block12, block13, '`13')
    block12.next = Goto(block2, None)
    i8 = block13.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b110001, SmallFixedBitVector(6))], Bool(), '`1 62:19-62:27', 'zz446')
    block13.next = ConditionalGoto(i8, block14, block15, '`15')
    block14.next = Goto(block2, None)
    i9 = block15.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b1111, SmallFixedBitVector(6))], Bool(), '`1 63:19-63:27', 'zz442')
    block15.next = ConditionalGoto(i9, block16, block17, '`17')
    block16.next = Goto(block2, None)
    i10 = block17.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b110011, SmallFixedBitVector(6))], Bool(), '`1 64:19-64:27', 'zz438')
    block17.next = ConditionalGoto(i10, block18, block19, '`19')
    block18.next = Goto(block2, None)
    i11 = block19.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b11111, SmallFixedBitVector(6))], Bool(), '`1 65:19-65:27', 'zz434')
    block19.next = ConditionalGoto(i11, block20, block21, '`21')
    block20.next = Goto(block2, None)
    i12 = block21.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b110111, SmallFixedBitVector(6))], Bool(), '`1 66:19-66:27', 'zz430')
    block21.next = ConditionalGoto(i12, block22, block23, '`23')
    block22.next = Goto(block2, None)
    i13 = block23.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b1110, SmallFixedBitVector(6))], Bool(), '`1 67:19-67:27', 'zz426')
    block23.next = ConditionalGoto(i13, block24, block25, '`25')
    block24.next = Goto(block2, None)
    i14 = block25.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b110010, SmallFixedBitVector(6))], Bool(), '`1 68:19-68:27', 'zz422')
    block25.next = ConditionalGoto(i14, block26, block27, '`27')
    block26.next = Goto(block2, None)
    i15 = block27.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b10, SmallFixedBitVector(6))], Bool(), '`1 69:19-69:27', 'zz418')
    block27.next = ConditionalGoto(i15, block28, block29, '`29')
    block28.next = Goto(block2, None)
    i16 = block29.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b10011, SmallFixedBitVector(6))], Bool(), '`1 70:19-70:27', 'zz414')
    block29.next = ConditionalGoto(i16, block30, block31, '`31')
    block30.next = Goto(block2, None)
    i17 = block31.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b111, SmallFixedBitVector(6))], Bool(), '`1 71:19-71:27', 'zz410')
    block31.next = ConditionalGoto(i17, block32, block33, '`33')
    block32.next = Goto(block2, None)
    i18 = block33.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b0, SmallFixedBitVector(6))], Bool(), '`1 72:19-72:27', 'zz46')
    block33.next = ConditionalGoto(i18, block34, block35, '`35')
    block34.next = Goto(block2, None)
    i19 = block35.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b10101, SmallFixedBitVector(6))], Bool(), '`1 73:19-73:27', 'zz42')
    block35.next = ConditionalGoto(i19, block36, block37, '`37')
    block36.next = Goto(block2, None)
    block37.next = Raise(StringConstant('match'), '`38')
    graph = Graph('zdecode_compute_backwards', [zargz3], block0)
    return graph

def test_nand_decode_compute_backwards():
    graph = get_decode_compute_backwards_graph()
    #graph.view()
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b1100))])
    res = interp.run()
    assert isinstance(res, z3backend.Enum)
    assert res.variant == "zC_D"

    x = z3.BitVec("x", 6)
    interp = z3backend.NandInterpreter(graph, [z3backend.Z3Value(x)])
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res.value).startswith("If(x == 42,\n   zC_ZERO,\n   If(x == 63,")

    # Now try to eval created z3 fromula for a concrete value
    solver = z3.Solver()
    solver.add(x == 48) #=> opcode zC_A
    solver.check()
    result_enum = solver.model().eval(res.toz3()) # dont have access to 'real' z3 enum vars here
    assert str(result_enum) == "zC_A"

    solver = z3.Solver()
    solver.add(x == 1) #=> no op
    solver.check()
    result_enum = solver.model().eval(res.toz3()) # dont have access to 'real' z3 enum vars here
    assert str(result_enum) == "___Exception___"

def get_zdecode_jump_backwards_graph():
    zjump = Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))
    zargz3 = Argument('zargz3', SmallFixedBitVector(3))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    i1 = block0.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b0, SmallFixedBitVector(3))], Bool(), '`1 79:13-79:18', 'zz430')
    block0.next = ConditionalGoto(i1, block1, block3, '`42')
    block1.next = Goto(block2, None)
    i2 = block2.emit_phi([block1, block4, block6, block8, block10, block12, block14, block16], [EnumConstant('zJDONT', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJGT', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJEQ', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJGE', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJLT', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJNE', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJLE', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), EnumConstant('zJMP', Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP')))], zjump)
    block2.next = Return(i2, None)
    i3 = block3.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b1, SmallFixedBitVector(3))], Bool(), '`1 80:13-80:18', 'zz426')
    block3.next = ConditionalGoto(i3, block4, block5, '`44')
    block4.next = Goto(block2, None)
    i4 = block5.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b10, SmallFixedBitVector(3))], Bool(), '`1 81:13-81:18', 'zz422')
    block5.next = ConditionalGoto(i4, block6, block7, '`46')
    block6.next = Goto(block2, None)
    i5 = block7.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b11, SmallFixedBitVector(3))], Bool(), '`1 82:13-82:18', 'zz418')
    block7.next = ConditionalGoto(i5, block8, block9, '`48')
    block8.next = Goto(block2, None)
    i6 = block9.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b100, SmallFixedBitVector(3))], Bool(), '`1 83:13-83:18', 'zz414')
    block9.next = ConditionalGoto(i6, block10, block11, '`50')
    block10.next = Goto(block2, None)
    i7 = block11.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b101, SmallFixedBitVector(3))], Bool(), '`1 84:13-84:18', 'zz410')
    block11.next = ConditionalGoto(i7, block12, block13, '`52')
    block12.next = Goto(block2, None)
    i8 = block13.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b110, SmallFixedBitVector(3))], Bool(), '`1 85:13-85:18', 'zz46')
    block13.next = ConditionalGoto(i8, block14, block15, '`54')
    block14.next = Goto(block2, None)
    i9 = block15.emit(Operation, '@eq_bits_bv_bv', [zargz3, SmallBitVectorConstant(0b111, SmallFixedBitVector(3))], Bool(), '`1 86:13-86:18', 'zz42')
    block15.next = ConditionalGoto(i9, block16, block17, '`56')
    block16.next = Goto(block2, None)
    block17.next = Raise(StringConstant('match'), '`57')
    graph = Graph('zdecode_jump_backwards', [zargz3], block0)
    return graph

def test_nand_decode_jump_backwards():
    graph = get_zdecode_jump_backwards_graph()
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b11))])
    res = interp.run()
    assert isinstance(res, z3backend.Enum)
    assert res.variant == "zJGE"

    x = z3.BitVec("x", 6)
    interp = z3backend.NandInterpreter(graph, [z3backend.Z3Value(x)])
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res.value).startswith("If(x == 0,\n   zJDONT,\n   If(x == 1,")

    # Now try to eval created z3 fromula for a concrete value
    solver = z3.Solver()
    solver.add(x == 7) #=> opcode zJMP
    solver.check()
    result_enum = solver.model().eval(res.toz3()) # dont have access to 'real' z3 enum vars here
    assert str(result_enum) == "zJMP"

def test_nand_compute_value():
    zarithmetic_op = Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))
    za = Argument('za', SmallFixedBitVector(1))
    zop = Argument('zop', zarithmetic_op)
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    block18 = Block()
    block19 = Block()
    block20 = Block()
    block21 = Block()
    block22 = Block()
    block23 = Block()
    block24 = Block()
    block25 = Block()
    block26 = Block()
    block27 = Block()
    block28 = Block()
    block29 = Block()
    block30 = Block()
    block31 = Block()
    block32 = Block()
    block33 = Block()
    block34 = Block()
    block35 = Block()
    block36 = Block()
    block37 = Block()
    block38 = Block()
    i2 = block0.emit(Operation, '@eq_bits_bv_bv', [za, SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], Bool(), '`1 124:13-124:21', 'zz441')
    block0.next = ConditionalGoto(i2, block1, block38, '`1 124:10-124:45')
    i3 = block1.emit(GlobalRead, 'zA', [], SmallFixedBitVector(16), None, None)
    block1.next = Goto(block2, None)
    i4 = block2.emit_phi([block38, block1], [None, i3], SmallFixedBitVector(16))
    i5 = block2.emit(GlobalRead, 'zD', [], SmallFixedBitVector(16), None, None)
    i6 = block2.emit(Operation, '@eq', [EnumConstant('zC_ZERO', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 127:4-127:10', None)
    block2.next = ConditionalGoto(i6, block3, block5, '`1 127:4-127:10')
    block3.next = Goto(block4, None)
    i7 = block4.emit_phi([block3, block6, block8, block10, block12, block14, block16, block18, block20, block22, block24, block26, block28, block30, block32, block34, block36, block37], [SmallBitVectorConstant(0x0, SmallFixedBitVector(16)), SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), SmallBitVectorConstant(0xffff, SmallFixedBitVector(16)), i5, i4, None, None, None, None, None, None, None, None, None, None, None, None, None], SmallFixedBitVector(16))
    block4.next = Return(i7, None)
    i8 = block5.emit(Operation, '@eq', [EnumConstant('zC_ONE', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 128:4-128:9', None)
    block5.next = ConditionalGoto(i8, block6, block7, '`1 128:4-128:9')
    block6.next = Goto(block4, None)
    i9 = block7.emit(Operation, '@eq', [EnumConstant('zC_MINUSONE', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 129:4-129:14', None)
    block7.next = ConditionalGoto(i9, block8, block9, '`1 129:4-129:14')
    block8.next = Goto(block4, None)
    i10 = block9.emit(Operation, '@eq', [EnumConstant('zC_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 130:4-130:7', None)
    block9.next = ConditionalGoto(i10, block10, block11, '`1 130:4-130:7')
    block10.next = Goto(block4, None)
    i11 = block11.emit(Operation, '@eq', [EnumConstant('zC_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 131:4-131:7', None)
    block11.next = ConditionalGoto(i11, block12, block13, '`1 131:4-131:7')
    block12.next = Goto(block4, None)
    i12 = block13.emit(Operation, '@eq', [EnumConstant('zC_NOT_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 132:4-132:11', None)
    block13.next = ConditionalGoto(i12, block14, block15, '`1 132:4-132:11')
    i13 = block14.emit(Operation, '@not_vec_bv', [i5, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 132:15-132:25', None)
    i7.prevvalues[5] = i13
    block14.next = Goto(block4, None)
    i14 = block15.emit(Operation, '@eq', [EnumConstant('zC_NOT_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 133:4-133:11', None)
    block15.next = ConditionalGoto(i14, block16, block17, '`1 133:4-133:11')
    i15 = block16.emit(Operation, '@not_vec_bv', [i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 133:15-133:25', None)
    i7.prevvalues[6] = i15
    block16.next = Goto(block4, None)
    i16 = block17.emit(Operation, '@eq', [EnumConstant('zC_NEG_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 134:4-134:11', None)
    block17.next = ConditionalGoto(i16, block18, block19, '`1 134:4-134:11')
    i17 = block18.emit(Operation, '@sub_bits_bv_bv', [SmallBitVectorConstant(0x0, SmallFixedBitVector(16)), i5, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 134:15-134:23', 'zz436')
    i7.prevvalues[7] = i17
    block18.next = Goto(block4, None)
    i18 = block19.emit(Operation, '@eq', [EnumConstant('zC_NEG_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 135:4-135:11', None)
    block19.next = ConditionalGoto(i18, block20, block21, '`1 135:4-135:11')
    i19 = block20.emit(Operation, '@sub_bits_bv_bv', [SmallBitVectorConstant(0x0, SmallFixedBitVector(16)), i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 135:15-135:23', 'zz433')
    i7.prevvalues[8] = i19
    block20.next = Goto(block4, None)
    i20 = block21.emit(Operation, '@eq', [EnumConstant('zC_D_ADD_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 136:4-136:13', None)
    block21.next = ConditionalGoto(i20, block22, block23, '`1 136:4-136:13')
    i21 = block22.emit(Operation, '@add_bits_bv_bv', [i5, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 136:17-136:27', 'zz430')
    i7.prevvalues[9] = i21
    block22.next = Goto(block4, None)
    i22 = block23.emit(Operation, '@eq', [EnumConstant('zC_A_ADD_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 137:4-137:13', None)
    block23.next = ConditionalGoto(i22, block24, block25, '`1 137:4-137:13')
    i23 = block24.emit(Operation, '@add_bits_bv_bv', [i4, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 137:17-137:27', 'zz427')
    i7.prevvalues[10] = i23
    block24.next = Goto(block4, None)
    i24 = block25.emit(Operation, '@eq', [EnumConstant('zC_D_SUB_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 138:4-138:13', None)
    block25.next = ConditionalGoto(i24, block26, block27, '`1 138:4-138:13')
    i25 = block26.emit(Operation, '@sub_bits_bv_bv', [i5, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 138:17-138:27', 'zz424')
    i7.prevvalues[11] = i25
    block26.next = Goto(block4, None)
    i26 = block27.emit(Operation, '@eq', [EnumConstant('zC_A_SUB_1', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 139:4-139:13', None)
    block27.next = ConditionalGoto(i26, block28, block29, '`1 139:4-139:13')
    i27 = block28.emit(Operation, '@sub_bits_bv_bv', [i4, SmallBitVectorConstant(0x1, SmallFixedBitVector(16)), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 139:17-139:27', 'zz421')
    i7.prevvalues[12] = i27
    block28.next = Goto(block4, None)
    i28 = block29.emit(Operation, '@eq', [EnumConstant('zC_D_ADD_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 140:4-140:13', None)
    block29.next = ConditionalGoto(i28, block30, block31, '`1 140:4-140:13')
    i29 = block30.emit(Operation, '@add_bits_bv_bv', [i5, i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 140:17-140:22', 'zz418')
    i7.prevvalues[13] = i29
    block30.next = Goto(block4, None)
    i30 = block31.emit(Operation, '@eq', [EnumConstant('zC_D_SUB_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 141:4-141:13', None)
    block31.next = ConditionalGoto(i30, block32, block33, '`1 141:4-141:13')
    i31 = block32.emit(Operation, '@sub_bits_bv_bv', [i5, i4, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 141:17-141:22', 'zz415')
    i7.prevvalues[14] = i31
    block32.next = Goto(block4, None)
    i32 = block33.emit(Operation, '@eq', [EnumConstant('zC_A_SUB_D', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 142:4-142:13', None)
    block33.next = ConditionalGoto(i32, block34, block35, '`1 142:4-142:13')
    i33 = block34.emit(Operation, '@sub_bits_bv_bv', [i4, i5, MachineIntConstant(16)], SmallFixedBitVector(16), '`1 142:17-142:22', 'zz412')
    i7.prevvalues[15] = i33
    block34.next = Goto(block4, None)
    i34 = block35.emit(Operation, '@eq', [EnumConstant('zC_D_AND_A', Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))), zop], Bool(), '`1 143:4-143:13', None)
    block35.next = ConditionalGoto(i34, block36, block37, '`1 143:4-143:13')
    i35 = block36.emit(Operation, '@and_vec_bv_bv', [i5, i4], SmallFixedBitVector(16), '`1 143:17-143:22', 'zz49')
    i7.prevvalues[16] = i35
    block36.next = Goto(block4, None)
    i36 = block37.emit(Operation, '@or_vec_bv_bv', [i5, i4], SmallFixedBitVector(16), '`1 144:16-144:21', 'zz46')
    i7.prevvalues[17] = i36
    block37.next = Goto(block4, None)
    i37 = block38.emit(GlobalRead, 'zA', [], SmallFixedBitVector(16), None, None)
    i38 = block38.emit(Operation, 'my_read_mem', [i37], SmallFixedBitVector(16), '`1 124:34-124:45', 'zz40')
    i4.prevvalues[0] = i38
    block38.next = Goto(block2, None)
    graph = Graph('zcompute_value', [za, zop], block0)
    #graph.view()

    # state is modified each Interpreter.run, thus we need to deepcopy it or create new state
    sharedstate = z3backend.SharedState({})
    sharedstate.register_enum("zarithmetic_op", ['zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'])
    
    enum_zC_A = sharedstate.get_w_enum("zarithmetic_op", "zC_A")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b0)), enum_zC_A], sharedstate.copy())# a == 0 && op = zC_A => load register A
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "reg_zA"

    # TODO: change to nandInterpreter
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b1)), enum_zC_A], sharedstate.copy())# a != 0 && op = zC_A => load mem[register_A]
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "memory[reg_zA]"

    # bitwise not registers 
    enum_zC_NOT_D = sharedstate.get_w_enum("zarithmetic_op", "zC_NOT_D")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b1)), enum_zC_NOT_D], sharedstate.copy())# op = zC_NOT_D => not register_D
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "~reg_zD"

    enum_zC_NOT_A = sharedstate.get_w_enum("zarithmetic_op", "zC_NOT_A")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b0)), enum_zC_NOT_A], sharedstate.copy())# a == 0 && op = zC_NOT_A => not register_A
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "~reg_zA"

    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b1)), enum_zC_NOT_A], sharedstate.copy())# a != 0 &&op = zC_NOT_A => not register_A
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "~memory[reg_zA]"

    # negate registers 
    enum_zC_NEG_A = sharedstate.get_w_enum("zarithmetic_op", "zC_NEG_A")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b0)), enum_zC_NEG_A], sharedstate.copy())# a == 0 && op = zC_A => -register A
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "0 - reg_zA"

    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b1)), enum_zC_NEG_A], sharedstate.copy())# a != 0 && op = zC_A => -memory[register_A]
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "0 - memory[reg_zA]"

    enum_zC_NEG_D = sharedstate.get_w_enum("zarithmetic_op", "zC_NEG_D")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b1)), enum_zC_NEG_D], sharedstate.copy())# op = zC_NEG_D => -register_D
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "0 - reg_zD"

    # add, and , or
    enum_zC_D_ADD_1 = sharedstate.get_w_enum("zarithmetic_op", "zC_D_ADD_1")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b0)), enum_zC_D_ADD_1], sharedstate.copy())# op = zC_D_ADD_1 => register_D + 1
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "reg_zD + 1"

    enum_zC_D_AND_A = sharedstate.get_w_enum("zarithmetic_op", "zC_D_AND_A")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b0)), enum_zC_D_AND_A], sharedstate.copy())# op = zC_D_AND_A => D & A
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "reg_zD & reg_zA" 

    enum_zC_D_OR_A = sharedstate.get_w_enum("zarithmetic_op", "zC_D_OR_A")
    interp = z3backend.NandInterpreter(graph, [z3backend.Constant(r_uint(0b0)), enum_zC_D_OR_A], sharedstate.copy())# op = zC_D_OR_A => D | A
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "reg_zD | reg_zA"

    # abstract
    abs_za = z3.BitVec("za", 1)
    abs_zop = sharedstate.get_abstract_enum_const_of_type("zarithmetic_op", "zop")
    interp = z3backend.NandInterpreter(graph, [z3backend.Z3Value(abs_za), z3backend.Z3Value(abs_zop)], sharedstate.copy())# op = ?
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res).startswith("If(za == 0,\n") #TODO: find better way to assert big z3 expr
    
    solver = z3.Solver()
    solver.add(abs_za == 1) 
    solver.add(abs_zop == sharedstate.get_enum("zarithmetic_op", "zC_NOT_A"))
    solver.check()
    result = solver.model().eval(res.toz3())
    assert str(result) == "~memory[reg_zA]"


def test_nand_decode():
    zinstr = Union('zinstr', ('zAINST', 'zCINST'), (SmallFixedBitVector(16), Struct('ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump', ('ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump0', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump1', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump2', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump3'), (SmallFixedBitVector(1), Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A')), Struct('ztuplez3z5bool_z5bool_z5bool', ('ztuplez3z5bool_z5bool_z5bool0', 'ztuplez3z5bool_z5bool_z5bool1', 'ztuplez3z5bool_z5bool_z5bool2'), (Bool(), Bool(), Bool()), True), Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), True)))
    zoptionzIUinstrzIzKzK = Union('zoptionzIUinstrzIzKzK', ('zNonezIUinstrzIzKzK', 'zSomezIUinstrzIzKzK'), (Unit(), Union('zinstr', ('zAINST', 'zCINST'), (SmallFixedBitVector(16), Struct('ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump', ('ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump0', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump1', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump2', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump3'), (SmallFixedBitVector(1), Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A')), Struct('ztuplez3z5bool_z5bool_z5bool', ('ztuplez3z5bool_z5bool_z5bool0', 'ztuplez3z5bool_z5bool_z5bool1', 'ztuplez3z5bool_z5bool_z5bool2'), (Bool(), Bool(), Bool()), True), Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), True)))))
    zarithmetic_op = Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A'))
    ztuplez3z5bool_z5bool_z5bool = Struct('ztuplez3z5bool_z5bool_z5bool', ('ztuplez3z5bool_z5bool_z5bool0', 'ztuplez3z5bool_z5bool_z5bool1', 'ztuplez3z5bool_z5bool_z5bool2'), (Bool(), Bool(), Bool()), True)
    zjump = Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))
    ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump = Struct('ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump', ('ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump0', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump1', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump2', 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump3'), (SmallFixedBitVector(1), Enum('zarithmetic_op', ('zC_ZERO', 'zC_ONE', 'zC_MINUSONE', 'zC_D', 'zC_A', 'zC_NOT_D', 'zC_NOT_A', 'zC_NEG_D', 'zC_NEG_A', 'zC_D_ADD_1', 'zC_A_ADD_1', 'zC_D_SUB_1', 'zC_A_SUB_1', 'zC_D_ADD_A', 'zC_D_SUB_A', 'zC_A_SUB_D', 'zC_D_AND_A', 'zC_D_OR_A')), Struct('ztuplez3z5bool_z5bool_z5bool', ('ztuplez3z5bool_z5bool_z5bool0', 'ztuplez3z5bool_z5bool_z5bool1', 'ztuplez3z5bool_z5bool_z5bool2'), (Bool(), Bool(), Bool()), True), Enum('zjump', ('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))), True)
    zmergez3var = Argument('zmergez3var', SmallFixedBitVector(16))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    i1 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(15), MachineIntConstant(15)], SmallFixedBitVector(1), '`1 99:23-99:41', 'zz453')
    i2 = block0.emit(Operation, '@eq_bits_bv_bv', [i1, SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], Bool(), '`1 99:23-99:41', 'zz437')
    block0.next = ConditionalGoto(i2, block1, block3, '`1 99:16-100:39')
    i3 = block1.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(14), MachineIntConstant(0)], SmallFixedBitVector(15), '`1 99:29-99:30', 'zz447')
    i4 = block1.emit(Operation, '@zero_extend_bv_i_i', [i3, MachineIntConstant(15), MachineIntConstant(16)], SmallFixedBitVector(16), '`1 100:14-100:37', 'zz443')
    i5 = block1.emit(Operation, 'zAINST', [i4], zinstr, '`1 100:8-100:38', 'zz439')
    i6 = block1.emit(Operation, 'zSomezIUinstrzIzKzK', [i5], zoptionzIUinstrzIzKzK, '`1 100:3-100:39', 'zz40')
    block1.next = Goto(block2, None)
    i7 = block2.emit_phi([block1, block4, block5], [i6, None, None], zoptionzIUinstrzIzKzK)
    block2.next = Return(i7, None)
    i8 = block3.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(15), MachineIntConstant(13)], SmallFixedBitVector(3), '`1 118:23-118:90', 'zz434')
    i9 = block3.emit(Operation, '@eq_bits_bv_bv', [i8, SmallBitVectorConstant(0b111, SmallFixedBitVector(3))], Bool(), '`1 118:23-118:90', 'zz43')
    block3.next = ConditionalGoto(i9, block4, block5, '`1 99:16-100:39')
    i10 = block4.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(2), MachineIntConstant(0)], SmallFixedBitVector(3), '`1 118:76-118:80', 'zz428')
    i11 = block4.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(5), MachineIntConstant(3)], SmallFixedBitVector(3), '`1 118:59-118:63', 'zz424')
    i12 = block4.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(11), MachineIntConstant(6)], SmallFixedBitVector(6), '`1 118:45-118:46', 'zz420')
    i13 = block4.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zmergez3var, MachineIntConstant(12), MachineIntConstant(12)], SmallFixedBitVector(1), '`1 118:31-118:32', 'zz416')
    i14 = block4.emit(Operation, 'zdecode_compute_backwards', [i12], zarithmetic_op, '`1 119:18-119:35', 'zz410')
    i15 = block4.emit(Operation, 'zdecode_destination', [i11], ztuplez3z5bool_z5bool_z5bool, '`1 119:37-119:61', 'zz411')
    i16 = block4.emit(Operation, 'zdecode_jump_backwards', [i10], zjump, '`1 119:63-119:80', 'zz412')
    i17 = block4.emit(StructConstruction, 'ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump', [i13, i14, i15, i16], ztuplez3z5bv1_z5enumz0zzarithmetic_op_z5structz0zztuplezz3zz5bool_zz5bool_zz5bool_z5enumz0zzjump, None, None)
    i18 = block4.emit(Operation, 'zCINST', [i17], zinstr, '`1 119:9-119:81', 'zz48') #op.is_union_creation
    i19 = block4.emit(Operation, 'zSomezIUinstrzIzKzK', [i18], zoptionzIUinstrzIzKzK, '`1 119:4-119:82', 'zz40')
    i7.prevvalues[1] = i19
    block4.next = Goto(block2, None)
    i20 = block5.emit(Operation, 'zNonezIUinstrzIzKzK', [UnitConstant.UNIT], zoptionzIUinstrzIzKzK, '`1 121:27-121:33', 'zz40')
    i7.prevvalues[2] = i20
    block5.next = Goto(block2, None)
    graph = Graph('zdecode', [zmergez3var], block0)
    graph_zdecode_compute_backwards = get_decode_compute_backwards_graph()
    graph_zdecode_destination = get_zdecode_destination_graph()
    graph_zdecode_jump_backwards = get_zdecode_jump_backwards_graph()
    #graph.view()

    funcs = {'zdecode_compute_backwards':graph_zdecode_jump_backwards,
             'zdecode_destination':graph_zdecode_destination,
             'zdecode_compute_backwards':graph_zdecode_compute_backwards}
    
    sharedstate = z3backend.SharedState(funcs)
    sharedstate.register_enum("zjump",('zJDONT', 'zJGT', 'zJEQ', 'zJGE', 'zJLT', 'zJNE', 'zJLE', 'zJMP'))
    

    merge = z3backend.Z3Value(z3.BitVec("zmergez3var", 16))
    interp = z3backend.NandInterpreter(graph, [merge], sharedstate)
    res = interp.run()
    assert isinstance(res, z3backend.Z3Value)
    assert str(res) == "reg_zA"