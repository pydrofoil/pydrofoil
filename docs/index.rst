Welcome to Pydrofoil's documentation!
=====================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


Pydrofoil is an experimental emulator-generator for ISA models written in
`Sail`__. It can generate emulators for RISC-V__, ARM__, CHERIoT__ based on
their respective Sail models. The Pydrofoil-generated emulators achieve fast
performance by doing dynamic binary translation (aka just-in-time compilation)
from guest instructions into host machine instructions. It's built on top of
the `RPython meta-jit compiler`__ and reuses all its optimizations, backends,
etc. Performance is typically an order of magnitude better than the emulators
generated by Sail.

To get started with the RISC-V emulator, please consult :doc:`building_pydrofoil`.

To read a more thorough description of how the project works, please refer to
our preprint_. To cite this work, please use the following BibTex snippet::

    @article{Bolz-Tereick2025-au,
      title         = "Pydrofoil: accelerating Sail-based instruction set
                       simulators",
      author        = "Bolz-Tereick, CF and Panayi, Luke and McKeogh,
                       Ferdia and Spink, Tom and Berger, Martin",
      abstract      = "We present Pydrofoil, a multi-stage compiler that generates
                       instruction set simulators (ISSs) from processor instruction
                       set architectures (ISAs) expressed in the high-level,
                       verification-oriented ISA specification language Sail.
                       Pydrofoil shows a > 230x speedup over the C-based ISS
                       generated by Sail on our benchmarks, and is based on the
                       following insights. (i) An ISS is effectively an interpreter
                       loop, and tracing just-in-time (JIT) compilers have proven
                       effective at accelerating those, albeit mostly for
                       dynamically typed languages. (ii) ISS workloads are highly
                       atypical, dominated by intensive bit manipulation
                       operations. Conventional compiler optimisations for
                       general-purpose programming languages have limited impact
                       for speeding up such workloads. We develop suitable
                       domain-specific optimisations. (iii) Neither tracing JIT
                       compilers, nor ahead-of-time (AOT) compilation alone, even
                       with domain-specific optimisations, suffice for the
                       generation of performant ISSs. Pydrofoil therefore
                       implements a hybrid approach, pairing an AOT compiler with a
                       tracing JIT built on the meta-tracing PyPy framework. AOT
                       and JIT use domain-specific optimisations. Our benchmarks
                       demonstrate that combining AOT and JIT compilers provides
                       significantly greater performance gains than using either
                       compiler alone.",
      month         =  mar,
      year          =  2025,
      archivePrefix = "arXiv",
      primaryClass  = "cs.PL",
      eprint        = "2503.04389"
    }

.. _preprint: https://arxiv.org/abs/2503.04389

.. toctree::
   :maxdepth: 1
   :hidden:

    Building Pydrofoil <building_pydrofoil>
    Using Pydrofoil <using_pydrofoil>
    Developing Pydrofoil <developing_pydrofoil>
    Background: Optimizations <background_optimizations>
    Arm <arm>
    CHERIoT <cheriot>
    Useful links <useful_links>
    Changelog <changelog>

.. __: https://github.com/rems-project/sail
.. __: https://github.com/riscv/sail-riscv
.. __: https://github.com/rems-project/sail-arm
.. __: https://github.com/CHERIoT-Platform/cheriot-sail
.. __: https://www3.hhu.de/stups/downloads/pdf/BoCuFiRi09_246.pdf

..
    Indices and tables
    ==================

    * :ref:`genindex`
    * :ref:`modindex`
    * :ref:`search`
