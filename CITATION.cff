cff-version: 1.2.0
title: Pydrofoil
message: >-
  If you use this software, please cite it using the
  metadata from this file.
type: software
authors:
  - given-names: CF
    family-names: Bolz-Tereick
    email: cfbolz@gmx.de
    affiliation: Heinrich-Heine-Universit채t D체sseldorf
    orcid: 'https://orcid.org/0000-0003-4562-1356'
repository-code: 'https://github.com/pydrofoil/pydrofoil'
url: 'https://pydrofoil.org'
license: MIT
preferred-citation:
  type: report
  authors:
  - family-names: "Bolz-Tereick"
    given-names: "CF"
    orcid: "https://orcid.org/0000-0003-4562-1356"
    email: cfbolz@gmx.de
    affiliation: Heinrich-Heine-Universit채t D체sseldorf
  - family-names: "Panayi"
    given-names: "Luke"
  - family-names: "McKeogh"
    given-names: "Ferdia"
    orcid: "https://orcid.org/0009-0006-2772-0448"
  - family-names: "Spink"
    given-names: "Tom"
    orcid: "https://orcid.org/0000-0002-7662-3146"
  - family-names: "Berger"
    given-names: "Martin"
    orcid: "https://orcid.org/0000-0003-3239-5812"
  doi: "10.48550/arXiv.2503.0438"
  month: 3
  title: "Pydrofoil: accelerating Sail-based instruction set simulators"
  year: 2025
  abstract: >-
    We present Pydrofoil, a multi-stage compiler that
    generates instruction set simulators (ISSs) from processor
    instruction set architectures (ISAs) expressed in the
    high-level, verification-oriented ISA specification
    language Sail. Pydrofoil shows a > 230x speedup over the
    C-based ISS generated by Sail on our benchmarks, and is
    based on the following insights. (i) An ISS is effectively
    an interpreter loop, and tracing just-in-time (JIT)
    compilers have proven effective at accelerating those,
    albeit mostly for dynamically typed languages. (ii) ISS
    workloads are highly atypical, dominated by intensive bit
    manipulation operations. Conventional compiler
    optimisations for general-purpose programming languages
    have limited impact for speeding up such workloads. We
    develop suitable domain-specific optimisations. (iii)
    Neither tracing JIT compilers, nor ahead-of-time (AOT)
    compilation alone, even with domain-specific
    optimisations, suffice for the generation of performant
    ISSs. Pydrofoil therefore implements a hybrid approach,
    pairing an AOT compiler with a tracing JIT built on the
    meta-tracing PyPy framework. AOT and JIT use
    domain-specific optimisations. Our benchmarks demonstrate
    that combining AOT and JIT compilers provides
    significantly greater performance gains than using either
    compiler alone. 
